#!/bin/sh
#
# Create user config file for Nginx server, start/stop server
# v2.7

# firmware and kernel versions
MINIMAL_XMON=2830
MINIMAL_KERNEL=20200817

# constants must be defined directly
#. /opt/xmon/bin/config.sh
KERNEL_VERSION_FILE="/etc/os-release"
XMON_VERSION_FILE="/opt/xmon/bin/VERSION"
XMON_CONF_HTTP="/opt/xmon/etc/http.conf"
NGINX_HTTP_CERT="/opt/xmon/etc/nginx/cert.pem"
NGINX_HTTP_KEY="/opt/xmon/etc/nginx/cert.key"

# check path with nginx.conf, used NGINX_SPOOL_DIR (see config.sh)
NGINX_CONF_USER="/var/spool/nginx/user.conf"
NGINX_CONF_CAM_PROXY="/var/spool/nginx/proxycam.conf"
NGINX_CAM_PASSWD_FILE="/var/spool/nginx/passwdcam"
NGINX_MEDIA_PASSWD_FILE="/var/spool/nginx/passwdmedia"

# config for nginx by camerasd
CAMERA_CONF_PROXY="/opt/xmon/etc/proxycam.conf"


PIDFILE="/var/run/nginx.pid"

# default
https_port="80"
https_enable="0"
https_cert=""
https_key=""

# version
version_major="0"
version_minor="0"
version_release="0"
version_integer="0"
version_new="OLD"
kernel_year="0"
kernel_month="0"
kernel_day="0"
kernel_new="OLD"

nginx_add()
{
    # remove old file
    if [ -f "${NGINX_CONF_USER}" ] ; then 
        rm -f "${NGINX_CONF_USER}"
    fi

    # check path to user config
    if [ -e "${XMON_CONF_HTTP}" ] ; then
        # include user config file
        . ${XMON_CONF_HTTP}
    else
        # default
        https_port="80"
        https_enable="0"
        https_cert=""
        https_key=""
    fi

    # all for ssl is ok
    if [ "${https_enable}" == "1" ] ; then

        # default 80 port if SSL fail
        if [ -f "${NGINX_HTTP_CERT}" ] && [ -f "${NGINX_HTTP_KEY}" ] ; then

            # https
            echo "listen ${https_port} ssl;" >> ${NGINX_CONF_USER}

            # ssl cert files have fixed path
            echo "ssl_certificate ${NGINX_HTTP_CERT};" >> ${NGINX_CONF_USER}
            echo "ssl_certificate_key ${NGINX_HTTP_KEY};" >> ${NGINX_CONF_USER}
        else
            echo "listen 80;" >> ${NGINX_CONF_USER}
        fi
    else
        # http no ssl
        echo "listen ${https_port};" >> ${NGINX_CONF_USER}
    fi
}

camera_proxy_add()
{
    # remove old file
    if [ -e "${NGINX_CONF_CAM_PROXY}" ] ; then 
        rm -f "${NGINX_CONF_CAM_PROXY}"
    fi

    # check path to user proxy cams config
    if [ -e "${CAMERA_CONF_PROXY}" ] ; then
        cp -f "${CAMERA_CONF_PROXY}" "${NGINX_CONF_CAM_PROXY}"
    else
        # no camera, create default
        echo "location /webcam/ {" >> ${NGINX_CONF_CAM_PROXY}
        echo "    proxy_pass http://mjpg_streamer_video/;" >> ${NGINX_CONF_CAM_PROXY}
        echo "    proxy_buffering off;" >> ${NGINX_CONF_CAM_PROXY}
        echo "    chunked_transfer_encoding off;" >> ${NGINX_CONF_CAM_PROXY}
        echo "}" >> ${NGINX_CONF_CAM_PROXY}
    fi
}

run_new()
{
    echo "Starting nginx..."

    # create empty passdw file if needed
    if [ ! -e "${NGINX_MEDIA_PASSWD_FILE}" ] ; then 
        echo "" > ${NGINX_MEDIA_PASSWD_FILE}
    fi

    if [ ! -e "${NGINX_CAM_PASSWD_FILE}" ] ; then 
        echo "" > ${NGINX_CAM_PASSWD_FILE}
    fi

    # load nginx user config and create config file
    nginx_add
    camera_proxy_add

    # add new version link
    if [ ! -e "/etc/nginx/sites-enabled/webui2" ] ; then 
        ln -s "/opt/xmon/etc/nginx/webui2" -T "/etc/nginx/sites-enabled/webui2"
    fi

    # remove old version link
    if [ -e "/etc/nginx/sites-enabled/webui" ] ; then 
        rm -f "/etc/nginx/sites-enabled/webui"
    fi

    # remove safe mode link
    if [ -e "/etc/nginx/sites-enabled/webui_safemode" ] ; then 
        rm -f "/etc/nginx/sites-enabled/webui_safemode"
    fi
}

run_old()
{
    echo "Starting nginx in backward compatibility..."

    # add old version link
    if [ ! -e "/etc/nginx/sites-enabled/webui" ] ; then 
        ln -s "/opt/xmon/etc/nginx/webui" -T "/etc/nginx/sites-enabled/webui"
    fi

    # remove new version link
    if [ -e "/etc/nginx/sites-enabled/webui2" ] ; then 
        rm -f "/etc/nginx/sites-enabled/webui2"
    fi

    # remove safe mode link
    if [ -e "/etc/nginx/sites-enabled/webui_safemode" ] ; then 
        rm -f "/etc/nginx/sites-enabled/webui_safemode"
    fi
}

run_safe()
{
	echo "Starting nginx in safe mode..."

    # remove config files
    rm -f ${NGINX_CONF_USER}
    #rm -f ${NGINX_MEDIA_PASSWD_FILE}
    rm -f ${NGINX_CONF_CAM_PROXY}

    # add safemode version link
    if [ ! -e "/etc/nginx/sites-enabled/webui_safemode" ] ; then 
        ln -s "/opt/xmon/etc/nginx/webui_safemode" -T "/etc/nginx/sites-enabled/webui_safemode"
    fi

    # remove old version link
    if [ -e "/etc/nginx/sites-enabled/webui" ] ; then 
        rm -f "/etc/nginx/sites-enabled/webui"
    fi

    # remove new version link
    if [ -e "/etc/nginx/sites-enabled/webui2" ] ; then 
        rm -f "/etc/nginx/sites-enabled/webui2"
    fi
}


case "$1" in
  start)

    mkdir -p /var/log/nginx
    mkdir -p /var/spool/nginx
    mkdir -p /var/tmp/nginx

    # check firmware version, file exist since 2.8.3 version
    if [ -e "${XMON_VERSION_FILE}" ] ; then
        . ${XMON_VERSION_FILE}
        version_major=`expr substr ${XMON_VERSION_NUM} 1 1`
        version_minor=`expr substr ${XMON_VERSION_NUM} 3 1`
        version_release=`expr substr ${XMON_VERSION_NUM} 5 2`
    else
        version_major="0"
        version_minor="0"
        version_release="0"
    fi

    # version number in integer form 2.8.3 = 2830
    version_integer=`expr ${version_major} \* 1000 + ${version_minor} \* 100 + ${version_release} \* 10`

    # new nginx config since version 2.8.3 (2830)
    if [ "${version_integer}" -ge ${MINIMAL_XMON} ] ; then
        version_new="NEW"
    else
        version_new="OLD"
    fi

    # check kernel version
    if [ -e "${KERNEL_VERSION_FILE}" ] ; then
        . ${KERNEL_VERSION_FILE}
        kernel_year=`expr substr ${VUTLAN_KERNEL_VERSION} 7 4`
        kernel_month=`expr substr ${VUTLAN_KERNEL_VERSION} 4 2`
        kernel_day=`expr substr ${VUTLAN_KERNEL_VERSION} 1 2`
    else
        kernel_year="0"
        kernel_month="0"
        kernel_day="0"
    fi

    # new nginx config since kernel 17.08.2020
    if [ "${kernel_year}${kernel_month}${kernel_day}" -ge ${MINIMAL_KERNEL} ] ; then
        kernel_new="NEW"
    else
        kernel_new="OLD"
    fi

    # if kernel and firmware is new version
    # if user config file exist
    if [ "${kernel_new}" = "NEW" ] && [ "${version_new}" = "NEW" ] && [ -e "${XMON_CONF_HTTP}" ]; then
        run_new
    else
        # for backward compatibility
        run_old
    fi

	start-stop-daemon -S -x /usr/sbin/nginx -p ${PIDFILE}
	;;
  safemode)

    run_safe

	start-stop-daemon -S -x /usr/sbin/nginx -p ${PIDFILE}
	;;
  stop)
	echo "Stopping nginx..."
	start-stop-daemon -K -o -p ${PIDFILE}
	;;
  restart|reload)
	"$0" stop
	"$0" start
	;;
  *)
	echo "Usage: $0 {start|stop|restart|safemode}"
	exit 1
esac


